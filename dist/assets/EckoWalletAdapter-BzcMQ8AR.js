import{l as T}from"./index-C2UG9WAS.js";var w;function O(e){return{lang:(e==null?void 0:e.lang)??(w==null?void 0:w.lang),message:e==null?void 0:e.message,abortEarly:(e==null?void 0:e.abortEarly)??(w==null?void 0:w.abortEarly),abortPipeEarly:(e==null?void 0:e.abortPipeEarly)??(w==null?void 0:w.abortPipeEarly)}}var k;function A(e){return k==null?void 0:k.get(e)}var f;function R(e){return f==null?void 0:f.get(e)}var g;function S(e,t){var r;return(r=g==null?void 0:g.get(e))==null?void 0:r.get(t)}function b(e){var r,n;const t=typeof e;return t==="string"?`"${e}"`:t==="number"||t==="bigint"||t==="boolean"?`${e}`:t==="object"||t==="function"?(e&&((n=(r=Object.getPrototypeOf(e))==null?void 0:r.constructor)==null?void 0:n.name))??"null":t}function E(e,t,r,n,s){const o=s&&"input"in s?s.input:r.value,i=(s==null?void 0:s.expected)??e.expects??null,u=(s==null?void 0:s.received)??b(o),a={kind:e.kind,type:e.type,input:o,expected:i,received:u,message:`Invalid ${t}: ${i?`Expected ${i} but r`:"R"}eceived ${u}`,requirement:e.requirement,path:s==null?void 0:s.path,issues:s==null?void 0:s.issues,lang:n.lang,abortEarly:n.abortEarly,abortPipeEarly:n.abortPipeEarly},c=e.kind==="schema",h=(s==null?void 0:s.message)??e.message??S(e.reference,a.lang)??(c?R(a.lang):null)??n.message??A(a.lang);h!==void 0&&(a.message=typeof h=="function"?h(a):h),c&&(r.typed=!1),r.issues?r.issues.push(a):r.issues=[a]}function N(e){return{version:1,vendor:"valibot",validate(t){return e["~run"]({value:t},O())}}}function D(e,t,r){return typeof e.fallback=="function"?e.fallback(t,r):e.fallback}function y(e,t,r){return typeof e.default=="function"?e.default(t,r):e.default}function v(e,t){return{kind:"schema",type:"object",reference:v,expects:"Object",async:!1,entries:e,message:t,get"~standard"(){return N(this)},"~run"(r,n){var o;const s=r.value;if(s&&typeof s=="object"){r.typed=!0,r.value={};for(const i in this.entries){const u=this.entries[i];if(i in s||(u.type==="exact_optional"||u.type==="optional"||u.type==="nullish")&&u.default!==void 0){const a=i in s?s[i]:y(u),c=u["~run"]({value:a},n);if(c.issues){const h={type:"object",origin:"value",input:s,key:i,value:a};for(const l of c.issues)l.path?l.path.unshift(h):l.path=[h],(o=r.issues)==null||o.push(l);if(r.issues||(r.issues=c.issues),n.abortEarly){r.typed=!1;break}}c.typed||(r.typed=!1),r.value[i]=c.value}else if(u.fallback!==void 0)r.value[i]=D(u);else if(u.type!=="exact_optional"&&u.type!=="optional"&&u.type!=="nullish"&&(E(this,"key",r,n,{input:void 0,expected:`"${i}"`,path:[{type:"object",origin:"key",input:s,key:i,value:s[i]}]}),n.abortEarly))break}}else E(this,"type",r,n);return r}}}function I(e,t){return{kind:"schema",type:"optional",reference:I,expects:`(${e.expects} | undefined)`,async:!1,wrapped:e,default:t,get"~standard"(){return N(this)},"~run"(r,n){return r.value===void 0&&(this.default!==void 0&&(r.value=y(this,r,n)),r.value===void 0)?(r.typed=!0,r):this.wrapped["~run"](r,n)}}}function C(e){return{kind:"schema",type:"string",reference:C,expects:"string",async:!1,message:e,get"~standard"(){return N(this)},"~run"(t,r){return typeof t.value=="string"?t.typed=!0:E(this,"type",t,r),t}}}const q=v({networkId:I(C())});class L extends Error{constructor(t){super(t[0].message),this.name="SchemaError",this.issues=t}}const _={CONT_TRANSACTIONS_NOT_SUPPORTED:"`cont` transactions are not supported",NO_TRANSACTIONS_TO_SIGN:"No transaction(s) to sign",NETWORK_MISMATCH:"Network is not equal for all transactions",ERROR_SIGNING_TRANSACTION:"Error signing transaction",TRANSACTION_HASH_MISMATCH:(e,t)=>`Hash of the transaction signed by the wallet does not match. Our hash: ${e}, wallet hash: ${t}`},P=e=>typeof e=="object"&&"responses"in e,m=e=>"cmd"in e?JSON.parse(e.cmd):e;function j(e){return"exec"in e.payload}const H=e=>{if(!j(e))throw new Error(_.CONT_TRANSACTIONS_NOT_SUPPORTED);return{code:e.payload.exec.code??"",data:e.payload.exec.data,caps:e.signers.flatMap(t=>t.clist===void 0?[]:t.clist.map(({name:r,args:n})=>{const s=r.split(".");return{role:s[s.length-1],description:`Description for ${r}`,cap:{name:r,args:n}}})),nonce:e.nonce,chainId:e.meta.chainId,gasLimit:e.meta.gasLimit,gasPrice:e.meta.gasPrice,sender:e.meta.sender,ttl:e.meta.ttl}};function G(e){return e.code!==void 0&&e.caps!==void 0}function U(e){if(G(e))return e;const t=m(e);return H(t)}const M=async e=>{if(!e)throw new Error(_.NO_TRANSACTIONS_TO_SIGN);const t=Array.isArray(e)?e:[e],{networkId:r}=m(t[0]),n=t.map(o=>{const{cmd:i,sigs:u}=o,a=m(o);if(r!==a.networkId)throw new Error(_.NETWORK_MISMATCH);return{cmd:i,sigs:a.signers.map((c,h)=>{var l;return{pubKey:c.pubKey,sig:((l=u[h])==null?void 0:l.sig)??null}})}}),s=t.map(o=>o.hash);return{commandSigDatas:n,transactionHashes:s,transactions:t,isList:Array.isArray(e)}},$=(e,t,r,n)=>{if(!P(e))throw new Error(_.ERROR_SIGNING_TRANSACTION);const s=e.responses;if(!Array.isArray(s))throw new Error(_.ERROR_SIGNING_TRANSACTION);return s.forEach((o,i)=>{if(o.outcome.result==="success"){if(o.outcome.hash!==t[i])throw new Error(_.TRANSACTION_HASH_MISMATCH(t[i],o.outcome.hash));const u=o.commandSigData.sigs.filter(a=>a.sig!==null);r[i]=T.addSignatures(r[i],...u)}}),n?r:r[0]},p=e=>!!(e!=null&&e.result),x=e=>typeof e=="object"&&e!==null&&"jsonrpc"in e&&e.jsonrpc==="2.0"&&"id"in e&&("result"in e&&!("error"in e)||"error"in e&&!("result"in e)),F="mainnet01";class K{constructor(t){this.connectSchema=q,this.provider=t.provider,this.networkId=(t==null?void 0:t.networkId)||F}async request(t){const r=await this.provider.request(t);if(!x(r))throw new Error("Provider response is not a valid JSON-RPC 2.0 response");return r}on(t,r){return this.provider.on(t,r),this}off(t,r){return this.provider.off(t,r),this}async connect(t){var s;let r=t;if(t!==void 0&&this.connectSchema!==void 0){const o=await((s=this.connectSchema)==null?void 0:s["~standard"].validate(t));if(o.issues)throw new L(o.issues);r=o.value}const n=await this.request({method:"kadena_connect",params:{networkId:this.networkId,...r}});return p(n)?n.result:null}async disconnect(){await this.request({method:"kadena_disconnect",params:{networkId:this.networkId}})}async getActiveAccount(){const t=await this.request({method:"kadena_getAccount_v1"});if(p(t))return t.result;throw new Error("Failed to fetch account")}async getAccounts(){const t=await this.request({method:"kadena_getAccounts_v2"});return p(t)?t.result:[]}async getActiveNetwork(){const t=await this.request({method:"kadena_getNetwork_v1"});if(p(t))return t.result;throw new Error("Failed to fetch network")}async getNetworks(){const t=await this.request({method:"kadena_getNetworks_v1"});return p(t)?t.result:[]}async signTransaction(t){const{commandSigDatas:r,transactionHashes:n,transactions:s,isList:o}=await M(t),i=await this.request({method:"kadena_quicksign_v1",params:{commandSigDatas:r}});if(p(i))return $(i.result,n,s,o);throw new Error("Error signing transaction")}async signCommand(t){const r=U(t),n=await this.request({method:"kadena_sign_v1",params:r});if(p(n))return n.result.body;throw new Error("Error signing command")}onAccountChange(t){this.on("kadena_accountChanged",t)}onNetworkChange(t){this.on("kadena_networkChanged",t)}}const d={PROVIDER_NOT_DETECTED:"Provider not detected",FAILED_TO_CONNECT:"Failed to connect",COULD_NOT_FETCH_ACCOUNT:"Could not fetch account",KADENA_CHANGE_NETWORK_UNSUPPORTED:"kadena_changeNetwork_v1 is not supported by the Ecko extension",ERROR_SIGNING_TRANSACTION:"Error signing transaction",TRANSACTION_HASH_MISMATCH:(e,t)=>`Hash of the transaction signed by the wallet does not match. Our hash: ${e}, wallet hash: ${t}`},V=e=>{try{return JSON.parse(e)}catch{return e}};class W extends K{constructor(t){super(t),this.name="Ecko",this._networkChangedListeners=[],this._accountChangeListeners=[]}async _connect(t,r=!1){if(!this.provider)throw new Error(d.PROVIDER_NOT_DETECTED);try{let n=await this.provider.request({method:"kda_checkStatus",...t});if(n.status!=="success"&&(await this.provider.request({method:"kda_connect",...t}),n=await this.provider.request({method:"kda_checkStatus",...t}),n.status!=="success"))throw new Error(n.message||d.FAILED_TO_CONNECT);const s=await this.provider.request({method:"kda_requestAccount",...t});if(s.status!=="success"||!s.wallet)throw new Error(s.message||d.COULD_NOT_FETCH_ACCOUNT);return this.networkId=t.networkId,{accountName:s.wallet.account,networkId:t.networkId,contract:"coin",guard:{keys:[s.wallet.publicKey],pred:"keys-all"},chainAccounts:[]}}catch(n){if(n instanceof Error&&n.message.toLowerCase().includes("invalid")){const s=await this.getActiveNetwork();this.networkId=s.networkId;try{return await this._connect({...t,networkId:s.networkId},r)}catch(o){if(r)return null;throw o}}if(r)return null;throw n}}on(t,r){if(!this.provider)throw new Error(d.PROVIDER_NOT_DETECTED);switch(t){case"kadena_accountChanged":{const n=async()=>{try{const s=await this.getActiveNetwork();let o=null;try{const i=await this.getActiveAccount();if("status"in i&&i.status==="fail")throw new Error(i.message||d.COULD_NOT_FETCH_ACCOUNT);o=i}catch{if(o=await this._connect({networkId:s.networkId},!0),!o)return}this.networkId=s.networkId;for(const i of this._networkChangedListeners)i(s);o&&r(o)}catch(s){console.error("Error handling account change event:",s)}};this._accountChangeListeners.push(n),this.provider.on("res_accountChange",n);break}case"kadena_networkChanged":{this._networkChangedListeners.push(r);break}default:this.provider.on(t,r)}return this}off(t,r){if(!this.provider)throw new Error(d.PROVIDER_NOT_DETECTED);switch(t){case"kadena_accountChanged":typeof this.provider.off=="function"&&this.provider.off("res_accountChange",r),this._accountChangeListeners=this._accountChangeListeners.filter(n=>n!==r);break;case"kadena_networkChanged":this._networkChangedListeners=this._networkChangedListeners.filter(n=>n!==r);break;default:typeof this.provider.off=="function"&&this.provider.off(t,r)}return this}async request(t){var i,u;if(!this.provider)throw new Error(d.PROVIDER_NOT_DETECTED);const{id:r,method:n,params:s={}}=t,o={networkId:this.networkId,...s};switch(n){case"kadena_connect":{const a=await this._connect(o,!1);if(!a)throw new Error(d.FAILED_TO_CONNECT);return{id:r,jsonrpc:"2.0",result:a}}case"kadena_disconnect":{if(!this.provider)throw new Error(d.PROVIDER_NOT_DETECTED);return await this.provider.request({method:"kda_disconnect",...o}),this.destroy(),{id:r,jsonrpc:"2.0",result:void 0}}case"kadena_getAccount_v1":{const a=await this.provider.request({method:"kda_requestAccount",...o});if(a.status!=="success"||!a.wallet)throw new Error(a.message||d.COULD_NOT_FETCH_ACCOUNT);return{id:r,jsonrpc:"2.0",result:{accountName:a.wallet.account,networkId:this.networkId,contract:"coin",guard:{keys:[a.wallet.publicKey],pred:"keys-all"},chainAccounts:[]}}}case"kadena_getAccounts_v2":{const a=await this.provider.request({method:"kda_requestAccount",...o});if(a.status!=="success"||!a.wallet)throw new Error(a.message||d.COULD_NOT_FETCH_ACCOUNT);const c={accountName:a.wallet.account,networkId:this.networkId,contract:"coin",guard:{keys:[a.wallet.publicKey],pred:"keys-all"},chainAccounts:[]};return{id:r,jsonrpc:"2.0",result:[c]}}case"kadena_getNetwork_v1":{const a=await this.provider.request({method:"kda_getNetwork"});return{id:r,jsonrpc:"2.0",result:{networkName:a.name,networkId:a.networkId,url:[a.url]}}}case"kadena_getNetworks_v1":{const a=await this.provider.request({method:"kda_getNetwork"}),c={networkName:a.name,networkId:a.networkId,url:[a.url]};return{id:r,jsonrpc:"2.0",result:[c]}}case"kadena_sign_v1":{const a=await this.provider.request({method:"kda_requestSign",data:{networkId:this.networkId,signingCmd:s}});if(a.status!=="success"){const h=a.error??a.message??d.ERROR_SIGNING_TRANSACTION;throw new Error(h)}const c={cmd:a.signedCmd.cmd,hash:a.signedCmd.hash,sigs:a.signedCmd.sigs};return{id:r,jsonrpc:"2.0",result:{body:c,chainId:(u=(i=V(c.cmd))==null?void 0:i.meta)==null?void 0:u.chainId}}}case"kadena_quicksign_v1":{const{commandSigDatas:a}=s,c=await this.provider.request({method:"kda_requestQuickSign",data:{networkId:this.networkId,commandSigDatas:a}});if(c.status!=="success"){const l=c.error??c.message??d.ERROR_SIGNING_TRANSACTION;throw new Error(l)}const h="responses"in c?c.responses:c.quickSignData;if(!Array.isArray(h))throw new Error(d.ERROR_SIGNING_TRANSACTION);return{id:r,jsonrpc:"2.0",result:{responses:h}}}case"kadena_checkStatus":return await this.provider.request({method:"kda_checkStatus",...o});default:return await this.provider.request(t)}}async disconnect(){if(!this.provider)throw new Error(d.PROVIDER_NOT_DETECTED);await this.provider.request({method:"kda_disconnect",networkId:this.networkId}),this.destroy()}destroy(){this.provider&&typeof this.provider.off=="function"&&this._accountChangeListeners.forEach(t=>{this.provider.off("res_accountChange",t)}),this._accountChangeListeners=[]}}export{W as EckoWalletAdapter};
